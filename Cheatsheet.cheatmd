# Built-in Elixir Modules

A cheatsheet with a list of the somewhat most important Built-in Elixir Module to keep it close at all times.

## The Kernel Module
{:, .col-2}

### `elem/2` 
Retrieve an element from a tuple given an index.

````
Kernel.elem({3, 6, 9}, 0)
3
````

### `is_atom/1`, `is_binary/1`
... `is_map/1`, and `is_integer/1` and etc. 

Checks the types of each value retun `true` or `false`.

````
is_atom({3, 6, 9})
false
````
````
is_integer(3)
true
````

### `max/2` and `min/2`  
Return the largest (max) or the smallest (min) value between two numbers.


````
max(100, 200)
200
````
````
min(-10, 0)
-10
````

### `inspect/2`
Convert any Elixir term into a string.
````
inspect(%{})
"%{}"
````
````
map = %{}
"#{inspect(map)}"
"%{}"
````

## The Interger Module
{:, .col-2}

### `Interger.digits/2`
Returns the ordered digits for the given`integer`.

````
Integer.digits(123_456_789)
[1, 2, 3, 4, 5, 6, 7, 8, 9]
````
````
Integer.digits([1, 2, 3, 4, 5, 6, 7, 8, 9])
123456789
````

### `parse/2`
Parses a text representation of an integer.

````
Integer.parse("34")
{34, ""}
````
````
Integer.parse("34.5")
{34, ".5"}
````
````
Integer.parse("three")
:error
````

## The String Module
{:, .col-2}

#### Indexes
You can imagine a string like a list of characters. However, be warned this is only a mental model, strings are not actually implemented as lists they are implemented as binaries.

 | subgraph Characters | subgraph Indexes | 
 |:-:|:-:|
 | H | 0 |
 | E | 1 |
 | L | 2 |
 | L | 3 |
 | O | 4 |
 
### `String.at/2`
Returns the grapheme at the position of the given UTF-8 string. If position is greater than string length, then it returns `nil`.

 ```
 String.at("hello", 2)
 "l"
```
### `String.contains?/2`
Searches if string contains any of the given contents.

```
String.contains?("Hello", "lo")
true
```

### `String.captalize/2`
Converts the first character in the given string to uppercase and the remainder to lowercase according to mode.

```
String.captalize("hello")
"Hello"
```

### `String.upcase/2`
Converts all characters in the given string to uppercase according to mode.

````
String.upcase("hello")
"HELLO"
````

### `String.downcase/2`
Converts all characters in the given string to lowercase according to mode.

````
String.downcase("HELLO")
"hello"
````

### `String.split/3`
Divides a string into parts based on a pattern.

````
String.split("have,a,great,day", ",")
["have", "a", "great", "day"]
````

### `String.trim/1`
Returns a string where all leading and trailing Unicode whitespaces have been removed.

```
String.trim(" hello! ")
"hello!"
```

## The List Module


