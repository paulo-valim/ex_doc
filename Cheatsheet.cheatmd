# Elixir's Control Flow

This document is a cheatsheet about the `if`, `cond` and `case` control flow structures.


## `if`, `unless`, `cond` and `case`
{:, .col-2}


### `if`

#### Is it gym day today?
````
day = :weekday

if day == :weekday do
  "Get ready for the gym!"
else
  "Stay at home and rest."
end

"Get ready for the gym!"
````
`if` evaluates a `true` statement for up to two paths.


### `unless`

#### Do I really have to wake up?
````
day = :weekday

unless day == :weekday do
  "You can stay in bed today"
else
  "You have work to do. Wake up!"
end

"You have work to do. Wake up!"
````
`unless` evaluates a `false` or `nil` statement, for up to two paths.


### `case`

#### Building a gym schedule!
```` 
#change to :monday, :tuesday (...) to see a different result.
day = :wednesday

case day do
  :monday -> "set the alarm to 7am"
  :tuesday -> "set the alarm to 8am"
  :wednesday -> "set the alarm to 7pm"
  :thursday -> "set the alarm to 5pm"
  :friday -> "set the alarm to 6am" 
end

"set the alarm to 7pm"
````
`case` is a control flow structure that allows you to define a series of cases that work well with pattern matching.

### `cond`

#### How much should I exercise today?
````
calories = 2500

cond do 
  calories >= 5000 -> "Today you must run 60 min"
  calories >= 4000 -> "Today you must run 45 min"
  calories >= 3000 -> "Today you must run 30 min"
  calories >= 2000 -> "Today you must run 15 min"
end

"Today you must run 15 min"
````

`cond` is used for control flow with many paths that does not work well with pattern matching.

### `CaseClauseError` and `CondClauseError`

If none of the clauses match, an error is raised:

#### `case`

````
day = :saturday

case day do
  :monday -> "set the alarm to 7am"
  :tuesday -> "set the alarm to 8am"
  :wednesday -> "set the alarm to 7pm"
  :thursday -> "set the alarm to 5pm"
  :friday -> "set the alarm to 6am" 
end

**(CaseClauseError) no case clause matching: :ok
````

#### `cond`
````
calories = 500

cond do 
  calories >= 5000 -> "Today you must run 60 min"
  calories >= 4000 -> "Today you must run 45 min"
  calories >= 3000 -> "Today you must run 30 min"
  calories >= 2000 -> "Today you must run 15 min"
end

**(CondClauseError) no cond clause evaluated to a truthy value
````

### Guards

To avoid `errors` you can always make use of `guards`, that means, if no condition is met the guard will be retun. 

#### `case`

````
day = :saturday

case day do
  :monday -> "set the alarm to 7am"
  :tuesday -> "set the alarm to 8am"
  :wednesday -> "set the alarm to 7pm"
  :thursday -> "set the alarm to 5pm"
  :friday -> "set the alarm to 6am"
  _ -> "Is not a weekday" 
end

"Is not a weekday"
````

#### `cond`
````
calories = 500

cond do 
  calories >= 5000 -> "Today you must run 60 min"
  calories >= 4000 -> "Today you must run 45 min"
  calories >= 3000 -> "Today you must run 30 min"
  calories >= 2000 -> "Today you must run 15 min"
  true -> "Not enough calories to exercise"
end

"Not enough calories to exercise"
````